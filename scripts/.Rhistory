feed_dat$RFd_feces <- feed_dat$DM * eval(parse(text = paste("feed_dat$Ex_deg_ResFib",type, sep = ""))) / 1000 * feed_intake * feed_dat$proportion
feed_dat$iNDF_feces <- feed_dat$DM * eval(parse(text = paste("feed_dat$Ex_nondeg_ResFib",type, sep = ""))) / 1000 * feed_intake * feed_dat$proportion
feed_dat$starch_feces <- feed_dat$DM * feed_dat$Ex_Starch / 1000 * feed_intake * feed_dat$proportion
feed_dat$OM_feces <- feed_dat$DM * eval(parse(text = paste("feed_dat$Ex_OM",type, sep = ""))) / 1000 * feed_intake * feed_dat$proportion
feed_dat$OM_intake <- feed_dat$DM * as.numeric(feed_dat$OM) / 1000 * feed_intake * feed_dat$proportion
feces_comp <- as.data.frame(t(colSums(feed_dat[, names.feces])))
feces_comp$ash_feces <- sum(feces_comp)/0.90 - sum(feces_comp)
feces_comp$VFA_feces <- sum(feces_comp) * 0.028 # VFA is 2.8 % of DM (n = 83). Source Saman
OM_dig <- (1 - sum(feed_dat$OM_feces)/sum(feed_dat$OM_intake))
feed_intake/batch_time * feed_DM_conc
DM_intake/batch_time
(5.405 - 6.31 * OM_dig + 0.505 * DM_intake/batch_time)
(5.405 - 6.31 * OM_dig + 0.505 * DM_intake/batch_time)
sum(feed_dat$OM_feces)
sum(feed_dat$OM_intake)
feed_dat$OM_intake
feed_dat$OM_intake/54
sum(feed_dat$OM_intake/54)
setwd("~/GitHub/PIGMET/scripts")
rm(list = ls())
library(dplyr)
library(tidyr)
library(lubridate)
library(readxl)
library(purrr)
library(gridExtra)
library(ggplot2)
ff <- list.files('../R', full.names = TRUE)
for (i in ff) source(i)
# get functions and data
abm_packages()
sourceCpp('../src/CTM_cpp.cpp')
# main dir for loop
main_dir <- getwd()
# define data sets to be used.
ff <- c('dalby_2023', 'metemis', 'vanderzaag_2022', 'overmeyer_2023', 'natalia')
sourceCpp('../src/CTM_cpp.cpp')
for (i in paste0('../data/', ff, '/scripts/', 'setup_dat_', ff,'.R')) source(i)
dat <- list()
# Loop through the file names and collect data in "dat"
for (w in ff) {
setwd(paste0('../data/', w, '/scripts/'))
source(paste0('setup_dat_', w, '.R'))
var_name <- paste0("dat", which(w == ff))
dat[[var_name]] <- eval(parse(text = paste0('setup_dat_', w, '()')))
setwd(main_dir)
}
rm(list = ls())
library(dplyr)
library(tidyr)
library(lubridate)
library(readxl)
library(purrr)
library(gridExtra)
library(ggplot2)
ff <- list.files('../R', full.names = TRUE)
for (i in ff) source(i)
# get functions and data
abm_packages()
setwd("~/GitHub/PIGMET/scripts")
rm(list = ls())
library(dplyr)
library(tidyr)
library(lubridate)
library(readxl)
library(purrr)
library(gridExtra)
library(ggplot2)
ff <- list.files('../R', full.names = TRUE)
for (i in ff) source(i)
# get functions and data
abm_packages()
sourceCpp('../src/CTM_cpp.cpp')
# main dir for loop
main_dir <- getwd()
# define data sets to be used.
ff <- c('dalby_2023', 'metemis', 'vanderzaag_2022', 'overmeyer_2023', 'natalia')
for (i in paste0('../data/', ff, '/scripts/', 'setup_dat_', ff,'.R')) source(i)
dat <- list()
# Loop through the file names and collect data in "dat"
for (w in ff) {
setwd(paste0('../data/', w, '/scripts/'))
source(paste0('setup_dat_', w, '.R'))
var_name <- paste0("dat", which(w == ff))
dat[[var_name]] <- eval(parse(text = paste0('setup_dat_', w, '()')))
setwd(main_dir)
}
rm(list = ls())
library(dplyr)
library(tidyr)
library(lubridate)
library(readxl)
library(purrr)
library(gridExtra)
library(ggplot2)
ff <- list.files('../R', full.names = TRUE)
for (i in ff) source(i)
# get functions and data
abm_packages()
sourceCpp('../src/CTM_cpp.cpp')
# main dir for loop
main_dir <- getwd()
# define data sets to be used.
ff <- c('dalby_2023', 'metemis', 'vanderzaag_2022', 'overmeyer_2023', 'natalia')
for (i in paste0('../data/', ff, '/scripts/', 'setup_dat_', ff,'.R')) source(i)
setwd("~/GitHub/PIGMET/scripts")
rm(list = ls())
library(dplyr)
library(tidyr)
library(lubridate)
library(readxl)
library(purrr)
library(gridExtra)
library(ggplot2)
ff <- list.files('../R', full.names = TRUE)
for (i in ff) source(i)
# get functions and data
abm_packages()
sourceCpp('../src/CTM_cpp.cpp')
# main dir for loop
main_dir <- getwd()
# define data sets to be used.
ff <- c('dalby_2023', 'metemis', 'vanderzaag_2022', 'overmeyer_2023', 'natalia')
for (i in paste0('../data/', ff, '/scripts/', 'setup_dat_', ff,'.R')) source(i)
dat <- list()
# Loop through the file names and collect data in "dat"
for (w in ff) {
setwd(paste0('../data/', w, '/scripts/'))
source(paste0('setup_dat_', w, '.R'))
var_name <- paste0("dat", which(w == ff))
dat[[var_name]] <- eval(parse(text = paste0('setup_dat_', w, '()')))
setwd(main_dir)
}
View(dat)
setwd("~/GitHub/PIGMET/data/natalia/scripts")
dat <- read_excel('../dat/Example_dat_rev2.xlsx')
dat.mod <- dat %>%
rename(slurry_vol = `Slurry_volume(m3)`, CH4_emis_rate = `CH4 emis rate, g pr. day`,
temp_C = `slurry temp (deg C)`, area = `TANK slurry surface area (m2)`, tank = `TANK_ID in paper`) %>%
group_by(tank) %>%
mutate(temp_C = as.numeric(temp_C),
slurry_mass = as.numeric(slurry_vol) * 1000,
CH4_emis_rate = as.numeric(CH4_emis_rate),
start_date = min(datetime)) %>%
mutate(time = as.numeric((datetime - start_date)/60/60/24)) %>%
mutate(slurry_mass = approx(time, slurry_mass, time)$y, temp_C = approx(time, temp_C, time)$y) %>%
select(time, slurry_mass, CH4_emis_rate, temp_C, area, tank, pH)
dat.mod$name <- 'natalia_PC3'
dat.mod$name[dat.mod$tank == 'PN1'] <- 'natalia_PN1'
dat.mod$pH[dat.mod$pH == 'NA'] <- NA
dat.mod$pH <- as.numeric(dat.mod$pH)
slurry_mass_dat1 <- data.frame(time = dat.mod$time[dat.mod$tank == 'PC3'],
slurry_mass = dat.mod$slurry_mass[dat.mod$tank == 'PC3'])
temp_dat1 <- data.frame(time = dat.mod$time[dat.mod$tank == 'PC3'],
temp_C = dat.mod$temp_C[dat.mod$tank == 'PC3'])
emis_dat1 <- data.frame(time = dat.mod$time[dat.mod$tank == 'PC3' & !is.na(dat.mod$CH4_emis_rate)],
CH4_emis_rate = dat.mod$CH4_emis_rate[dat.mod$tank == 'PC3' & !is.na(dat.mod$CH4_emis_rate)])
pH_dat1 <- data.frame(time = c(dat.mod$time[dat.mod$tank == 'PC3' & !is.na(dat.mod$pH)]),
pH = c(dat.mod$pH[!is.na(dat.mod$pH) & dat.mod$tank == 'PC3']))
pH_dat1 <- 7.3 # there is no pH data for this tank.
slurry_mass_dat2 <- data.frame(time = dat.mod$time[dat.mod$tank == 'PN1'],
slurry_mass = dat.mod$slurry_mass[dat.mod$tank == 'PN1'])
temp_dat2 <- data.frame(time = dat.mod$time[dat.mod$tank == 'PN1'],
temp_C = dat.mod$temp_C[dat.mod$tank == 'PN1'])
emis_dat2 <- data.frame(time = dat.mod$time[dat.mod$tank == 'PN1' & !is.na(dat.mod$CH4_emis_rate)],
CH4_emis_rate = dat.mod$CH4_emis_rate[dat.mod$tank == 'PN1' & !is.na(dat.mod$CH4_emis_rate)])
pH_dat2 <- data.frame(time = c(dat.mod$time[dat.mod$tank == 'PN1' & !is.na(dat.mod$pH)]),
pH = c(dat.mod$pH[!is.na(dat.mod$pH) & dat.mod$tank == 'PN1']))
man_pars1  = list(conc_fresh = list(sulfide = 0.08, urea = 0.01, sulfate = 0.02, TAN = 2.76, starch = 0.98,
VFA = 4.34, xa_dead = 0, CF = 22.99, CP = 16.18, RFd = 21.37, iNDF = 15, VSd = 0, VSd_A = 44.4, VSnd_A = 20, ash = 15), pH = pH_dat1, dens = 1000)
xa_fresh1 = c(m0 = 0.05, m1 = 0.08, m2 = 0.09, sr1 = 0.06)
man_pars2  <- list(conc_fresh = list(sulfide = 0.07, urea = 0, sulfate = 0.01, TAN = 2.26, starch = 0.48,
VFA = 3.44, xa_dead = 0, CF = 20.85, CP = 11.42, RFd = 15.72, iNDF = 15, VSd = 0, VSd_A = 44.4, VSnd_A = 20, ash = 15), pH = pH_dat1, dens = 1000)
xa_fresh2 = c(m0 = 0.04, m1 = 0.07, m2 = 0.1, sr1 = 0.04)
init_pars1 = list(conc_init = man_pars1$conc_fresh)
init_pars2 = list(conc_init = man_pars2$conc_fresh)
mng_pars1 = list(slurry_prod_rate = 0,
slurry_mass = slurry_mass_dat1,
storage_depth = 10,
resid_depth = 0.2,
floor_area = 0,
area = dat.mod$area[dat.mod$tank == 'PC3'][1],
empty_int = 35,
temp_C = temp_dat1,
wash_water = 0,
wash_int = NA,
rest_d = 0,
cover = 'tent',
resid_enrich = 0.9,
slopes = c(urea = NA, slurry_prod_rate = NA),
scale = c(ks_coefficient = 1.170719751, qhat_opt = 0.316190792, xa_fresh = 1, yield = 1, alpha_opt = 2.477011426))
grp_pars1 = list(grps = c('m0', 'm1', 'm2', 'sr1'),
yield = c(default = 0.05, sr1 = 0.065),
xa_fresh = xa_fresh1,
xa_init = xa_fresh1,
decay_rate = c(all = 0.02),
ks_coefficient = c(default = 1, sr1 = 0.4),
qhat_opt = c(m0 = 1.5, m1 = 3.6, m2 = 5.6 , m3 = 7.2, m4 = 8, m5 = 8, sr1 = 8),
T_opt = c(m0 = 18, m1 = 18, m2 = 28, m3 = 36, m4 = 43.75, m5 = 55, sr1 = 43.75),
T_min = c(m0 = 0, m1 = 10, m2 = 10, m3 = 15, m4 = 26.25, m5 = 30, sr1 = 0),
T_max = c(m0 = 25, m1 = 25, m2 = 38, m3 = 45, m4 = 51.25, m5 = 60, sr1 = 51.25),
ki_NH3_min = c(all = 0.015),
ki_NH3_max = c(all = 0.13),
ki_NH4_min = c(all = 2.7),
ki_NH4_max = c(all = 4.8),
ki_H2S_slope = c(default = -0.10623, sr1 = -0.1495),
ki_H2S_int = c(default = 0.93066, sr1 = 1.2938),
ki_H2S_min = c(default = 0.08))
times1 <- dat.mod$time[!is.na(dat.mod$CH4_emis_rate) & dat.mod$tank == 'PC3']
wthr_pars1 = list(temp_air_C = mean(dat.mod$temp_C[dat.mod$tank == 'PC3'], na.rm = T), RH = 71, rain = 0, pres_kpa = 101, rs = 20)
evap_pars1 = list(evap = 0 * et(temp_C = wthr_pars1$temp_air_C, pres_kpa = wthr_pars1$pres_kpa, rs = wthr_pars1$rs))                # mm/d
mng_pars2 = list(slurry_prod_rate = 0,
slurry_mass = slurry_mass_dat2,
storage_depth = 4,
resid_depth = 0.2,
floor_area = 0,
area = dat.mod$area[dat.mod$tank == 'PN1'][1],
empty_int = 35,
temp_C = temp_dat2,
wash_water = 0,
wash_int = NA,
rest_d = 0,
cover = 'none',
resid_enrich = 0.9,
slopes = c(urea = NA, slurry_prod_rate = NA),
scale = c(ks_coefficient = 1.170719751, qhat_opt = 0.316190792, xa_fresh = 1, yield = 1, alpha_opt = 2.477011426))
grp_pars2 = list(grps = c('m0', 'm1', 'm2', 'sr1'),
yield = c(default = 0.05, sr1 = 0.065),
xa_fresh = xa_fresh2,
xa_init = xa_fresh2,
decay_rate = c(all = 0.02),
ks_coefficient = c(default = 1, sr1 = 0.4),
qhat_opt = c(m0 = 1.5, m1 = 3.6, m2 = 5.6 , m3 = 7.2, m4 = 8, m5 = 8, sr1 = 8),
T_opt = c(m0 = 18, m1 = 18, m2 = 28, m3 = 36, m4 = 43.75, m5 = 55, sr1 = 43.75),
T_min = c(m0 = 0, m1 = 10, m2 = 10, m3 = 15, m4 = 26.25, m5 = 30, sr1 = 0),
T_max = c(m0 = 25, m1 = 25, m2 = 38, m3 = 45, m4 = 51.25, m5 = 60, sr1 = 51.25),
ki_NH3_min = c(all = 0.015),
ki_NH3_max = c(all = 0.13),
ki_NH4_min = c(all = 2.7),
ki_NH4_max = c(all = 4.8),
ki_H2S_slope = c(default = -0.10623, sr1 = -0.1495),
ki_H2S_int = c(default = 0.93066, sr1 = 1.2938),
ki_H2S_min = c(default = 0.08))
times2 <- dat.mod$time[!is.na(dat.mod$CH4_emis_rate) & dat.mod$tank == 'PN1']
wthr_pars2 = list(temp_air_C = mean(dat.mod$temp_C[dat.mod$tank == 'PN1'], na.rm = T), RH = 50, rain = 1.9, pres_kpa = 101, rs = 20)
evap_pars2 = list(evap = et(temp_C = wthr_pars2$temp_air_C, pres_kpa = wthr_pars2$pres_kpa, rs = wthr_pars2$rs))                # mm/d
spinup1 <- abm(max(times1), mng_pars = mng_pars1, man_pars = man_pars1, init_pars = init_pars1,
grp_pars = grp_pars1, wthr_pars = wthr_pars1, evap_pars = evap_pars1)
spinup2 <- abm(max(times2), mng_pars = mng_pars2, man_pars = man_pars2, init_pars = init_pars2,
grp_pars = grp_pars2, wthr_pars = wthr_pars2, evap_pars = evap_pars2)
max(spinup2$slurry_mass)
dat.mod$area[dat.mod$tank == 'PN1'][1]
rm(list = ls())
library(dplyr)
setwd("~/GitHub/PIGMET/scripts")
rm(list = ls())
library(dplyr)
library(tidyr)
library(lubridate)
library(readxl)
library(purrr)
library(gridExtra)
library(ggplot2)
ff <- list.files('../R', full.names = TRUE)
for (i in ff) source(i)
# get functions and data
abm_packages()
sourceCpp('../src/CTM_cpp.cpp')
# main dir for loop
main_dir <- getwd()
# define data sets to be used.
ff <- c('dalby_2023', 'metemis', 'vanderzaag_2022', 'overmeyer_2023', 'natalia')
for (i in paste0('../data/', ff, '/scripts/', 'setup_dat_', ff,'.R')) source(i)
dat <- list()
# Loop through the file names and collect data in "dat"
for (w in ff) {
setwd(paste0('../data/', w, '/scripts/'))
source(paste0('setup_dat_', w, '.R'))
var_name <- paste0("dat", which(w == ff))
dat[[var_name]] <- eval(parse(text = paste0('setup_dat_', w, '()')))
setwd(main_dir)
}
setwd("~/GitHub/Manure_kinetics_paper/scripts")
rm(list =ls())
library("readxl")
library("ggplot2")
library("gridExtra")
library("dplyr")
library("tidyr")
library('ggpmisc')
dat <- read_excel("../data/dat_comp.xlsx", sheet = "analysis", skip = 1, col_names = T)
fresh <- dat[1:6,]
fresh$source <- c('urine', 'urine', 'urine', 'feces', 'feces', 'feces')
names <- c('vfa','tn','tan','dm','vs','hem','cel','ndf','lig','lip', 'c_dry','o_dry','n_dry','h_dry','s_dry','source')
fresh <- fresh[,  colnames(fresh) %in% names]
fresh.mod <- fresh %>% group_by(source) %>% summarise(across(, .fns = list(Mean = mean, SD = sd), na.rm = TRUE))
write.csv(fresh.mod, '../output/fresh_conc_table.csv', row.names = F)
# removed rows with time-zero samples
rem_rows <- which(dat$id <= 9)
dat <- dat[-c(rem_rows), ]
for(i in (1:16)){
dat$vs[dat$reactor == i] <- approx(x = dat$day[!is.na(dat$vs) & dat$reactor == i & dat$day < 86], y = dat$vs[!is.na(dat$vs) & dat$reactor == i & dat$day < 86], xout = dat$day[dat$reactor == i])$y
}
dat$vs[dat$day %in% c(29, 36, 50, 57, 71, 78)] <- NA
dat$dm_calc <- dat$dm[dat$day == 2] * dat$vs/100 + dat$ash[dat$day == 2]/100 * dat$dm[dat$day == 2]
# use calculated dm
dat$dm_used <- dat$dm_calc
# organic matter components
comps_dm <- c('lip', 'cel', 'hem', 'lig', 'ndf',  'pro.n_dry', 'n_dry', 'c_dry', 'vs')
comps_slurry <- c('vfa', 'pro', 'tan')
pH <- 'pH'
dat_mass <- dat %>% mutate(pro.n_dry = n_dry * 6.25, across(comps_dm, function(x) x/100 * dm_used/100)) %>%
mutate(across(comps_slurry, function(x) x * (slurry_before_sample + sample_removed)/(slurry_before_sample[day == 0])/1000))
dat_grouped <- dat_mass %>% filter(reactor != 1) %>% select(c(comps_dm, comps_slurry, dm_used, dm_calc, day, reactor, temp, pH)) %>% mutate(RFd = ndf - lig) %>% group_by(temp, day) %>%
summarise(across(-c('reactor'), .fns = list(Mean = mean, SD = sd), na.rm = TRUE))
dat_grouped_log <- dat_grouped %>% filter(day > 0) %>% select(-ends_with('SD'), -starts_with('pH'), -starts_with('urea')) %>%
ungroup() %>% mutate(across(-c('day', 'temp'), function(x) log(x[day == 2]/x)))
dat_grouped_log_fit <- dat_grouped_log %>% group_by(temp) %>% mutate(across(-c('day'), function(x) lm(x ~ 0 + day)$coefficients)) %>% distinct(temp, .keep_all = T) %>% ungroup() %>% select(-c('vfa_Mean'))
write.csv(dat_grouped_log_fit, '../output/comps_rate_constants.csv', row.names = F)
R <- 0.008314 # KJ /(mol * K)
Arr_dat <- dat_grouped_log_fit %>% mutate(T_inv = 1/(temp + 273.15)) %>%
mutate(across(-c('temp','T_inv','day'), log))
keep <- apply(Arr_dat, 2, function(x) isTRUE(all(x)))
Ea<- as.data.frame(Arr_dat[, keep] %>% mutate(across(-c('temp','T_inv'), function(x) lm(x ~ T_inv)$coefficients[2]*R))) # KJ/mol
A <- as.data.frame(Arr_dat[, keep] %>% mutate(across(-c('temp','T_inv'), function(x) exp(lm(x ~ T_inv)$coefficients[1])))) # unit less?
write.csv(data.frame(rbind(Ea, A)), '../output/Arrh_constants.csv', row.names = F)
dat.mass <- dat %>% mutate(corr_mass = slurry_before_sample + sample_removed) %>% select(day, corr_mass, temp, dm) %>% group_by(temp, day) %>% summarise(mass.mean = mean(corr_mass, na.rm = T), dm = mean(dm, na.rm = T))
dat.mass$mass.mean[dat.mass$day >= 20] <- dat.mass$mass.mean[dat.mass$day >= 20] - 100
dat.mass$mass.mean[is.na(dat.mass$dm)] <- NA
dat.mass$temp <- as.factor(dat.mass$temp)
write.csv(dat.mass, '../output/mass_dat.csv', row.names = F)
rm(list =ls())
library("readxl")
library("ggplot2")
library("gridExtra")
library("dplyr")
library("tidyr")
library('ggpmisc')
dat <- read_excel("../data/dat_comp.xlsx", sheet = "analysis", skip = 1, col_names = T)
fresh <- dat[1:6,]
fresh$source <- c('urine', 'urine', 'urine', 'feces', 'feces', 'feces')
names <- c('vfa','tn','tan','dm','vs','hem','cel','ndf','lig','lip', 'c_dry','o_dry','n_dry','h_dry','s_dry','source')
fresh <- fresh[,  colnames(fresh) %in% names]
fresh.mod <- fresh %>% group_by(source) %>% summarise(across(, .fns = list(Mean = mean, SD = sd), na.rm = TRUE))
write.csv(fresh.mod, '../output/fresh_conc_table.csv', row.names = F)
# removed rows with time-zero samples
rem_rows <- which(dat$id <= 9)
dat <- dat[-c(rem_rows), ]
for(i in (1:16)){
dat$vs[dat$reactor == i] <- approx(x = dat$day[!is.na(dat$vs) & dat$reactor == i & dat$day < 86], y = dat$vs[!is.na(dat$vs) & dat$reactor == i & dat$day < 86], xout = dat$day[dat$reactor == i])$y
}
dat$vs[dat$day %in% c(29, 36, 50, 57, 71, 78)] <- NA
dat$dm_calc <- dat$dm[dat$day == 2] * dat$vs/100 + dat$ash[dat$day == 2]/100 * dat$dm[dat$day == 2]
# use calculated dm
dat$dm_used <- dat$dm_calc
# organic matter components
comps_dm <- c('lip', 'cel', 'hem', 'lig', 'ndf',  'pro.n_dry', 'n_dry', 'c_dry', 'vs')
comps_slurry <- c('vfa', 'pro', 'tan')
pH <- 'pH'
dat_mass <- dat %>% mutate(pro.n_dry = n_dry * 6.25, across(comps_dm, function(x) x/100 * dm_used/100)) %>%
mutate(across(comps_slurry, function(x) x * (slurry_before_sample + sample_removed)/(slurry_before_sample[day == 0])/1000))
dat_grouped <- dat_mass %>% filter(reactor != 1) %>% select(c(comps_dm, comps_slurry, dm_used, dm_calc, day, reactor, temp, pH)) %>% mutate(RFd = ndf - lig) %>% group_by(temp, day) %>%
summarise(across(-c('reactor'), .fns = list(Mean = mean, SD = sd), na.rm = TRUE))
View(dat_grouped)
dat_grouped_log <- dat_grouped %>% filter(day > 0) %>% select(-ends_with('SD'), -starts_with('pH'), -starts_with('urea')) %>%
ungroup() %>% mutate(across(-c('day', 'temp'), function(x) log(x[day == 2]/x)))
dat_grouped_log_fit <- dat_grouped_log %>% group_by(temp) %>% mutate(across(-c('day'), function(x) lm(x ~ 0 + day)$coefficients)) %>% distinct(temp, .keep_all = T) %>% ungroup() %>% select(-c('vfa_Mean'))
View(dat_grouped_log_fit)
# organic matter components
comps_dm <- c('lip', 'cel', 'hem', 'lig', 'ndf',  'pro.n_dry', 'n_dry', 'c_dry', 'vs')
comps_slurry <- c('vfa', 'pro', 'tan')
pH <- 'pH'
dat_mass <- dat %>% mutate(pro.n_dry = n_dry * 6.25, across(comps_dm, function(x) x/100 * dm_used/100)) %>%
mutate(across(comps_slurry, function(x) x * (slurry_before_sample + sample_removed)/(slurry_before_sample[day == 0])/1000))
View(dat_mass)
rm(list =ls())
library("readxl")
library("ggplot2")
library("gridExtra")
library("dplyr")
library("tidyr")
library('ggpmisc')
dat <- read_excel("../data/dat_comp.xlsx", sheet = "analysis", skip = 1, col_names = T)
fresh <- dat[1:6,]
fresh$source <- c('urine', 'urine', 'urine', 'feces', 'feces', 'feces')
names <- c('vfa','tn','tan','dm','vs','hem','cel','ndf','lig','lip', 'c_dry','o_dry','n_dry','h_dry','s_dry','source')
names <- c('vfa','tn','tan','dm','vs','hem','cel','ndf','indf','lig','lip', 'c_dry','o_dry','n_dry','h_dry','s_dry','source')
fresh <- fresh[,  colnames(fresh) %in% names]
fresh.mod <- fresh %>% group_by(source) %>% summarise(across(, .fns = list(Mean = mean, SD = sd), na.rm = TRUE))
View(fresh.mod)
write.csv(fresh.mod, '../output/fresh_conc_table.csv', row.names = F)
# removed rows with time-zero samples
rem_rows <- which(dat$id <= 9)
dat <- dat[-c(rem_rows), ]
for(i in (1:16)){
dat$vs[dat$reactor == i] <- approx(x = dat$day[!is.na(dat$vs) & dat$reactor == i & dat$day < 86], y = dat$vs[!is.na(dat$vs) & dat$reactor == i & dat$day < 86], xout = dat$day[dat$reactor == i])$y
}
dat$vs[dat$day %in% c(29, 36, 50, 57, 71, 78)] <- NA
dat$dm_calc <- dat$dm[dat$day == 2] * dat$vs/100 + dat$ash[dat$day == 2]/100 * dat$dm[dat$day == 2]
# use calculated dm
dat$dm_used <- dat$dm_calc
rm(list =ls())
rm(list =ls())
library("readxl")
library("ggplot2")
library("gridExtra")
library("dplyr")
library("tidyr")
library('ggpmisc')
rm(list =ls())
library("readxl")
library("ggplot2")
library("gridExtra")
library("dplyr")
library("tidyr")
library('ggpmisc')
dat <- read_excel("../data/dat_comp.xlsx", sheet = "analysis", skip = 1, col_names = T)
fresh <- dat[1:6,]
fresh$source <- c('urine', 'urine', 'urine', 'feces', 'feces', 'feces')
names <- c('vfa','tn','tan','dm','vs','hem','cel','ndf','indf','lig','lip', 'c_dry','o_dry','n_dry','h_dry','s_dry','source')
fresh <- fresh[,  colnames(fresh) %in% names]
fresh.mod <- fresh %>% group_by(source) %>% summarise(across(, .fns = list(Mean = mean, SD = sd), na.rm = TRUE))
write.csv(fresh.mod, '../output/fresh_conc_table.csv', row.names = F)
# removed rows with time-zero samples
rem_rows <- which(dat$id <= 9)
dat <- dat[-c(rem_rows), ]
for(i in (1:16)){
dat$vs[dat$reactor == i] <- approx(x = dat$day[!is.na(dat$vs) & dat$reactor == i & dat$day < 86], y = dat$vs[!is.na(dat$vs) & dat$reactor == i & dat$day < 86], xout = dat$day[dat$reactor == i])$y
}
dat$vs[dat$day %in% c(29, 36, 50, 57, 71, 78)] <- NA
dat$dm_calc <- dat$dm[dat$day == 2] * dat$vs/100 + dat$ash[dat$day == 2]/100 * dat$dm[dat$day == 2]
# use calculated dm
dat$dm_used <- dat$dm_calc
# organic matter components
comps_dm <- c('lip', 'cel', 'hem', 'lig', 'ndf',  'pro.n_dry', 'n_dry', 'c_dry', 'vs')
# organic matter components
comps_dm <- c('lip', 'cel', 'hem', 'lig', 'ndf', 'indf', 'pro.n_dry', 'n_dry', 'c_dry', 'vs')
comps_slurry <- c('vfa', 'pro', 'tan')
pH <- 'pH'
dat_mass <- dat %>% mutate(pro.n_dry = n_dry * 6.25, across(comps_dm, function(x) x/100 * dm_used/100)) %>%
mutate(across(comps_slurry, function(x) x * (slurry_before_sample + sample_removed)/(slurry_before_sample[day == 0])/1000))
View(dat_mass)
dat_mass$RFd <- dat_mass$ndf - dat_mass$indf
comps_dm
comps_dm <- c(comps_dm, 'RFd')
dat_grouped <- dat_mass %>% filter(reactor != 1) %>% select(c(comps_dm, comps_slurry, dm_used, dm_calc, day, reactor, temp, pH)) %>% mutate(RFd = ndf - lig) %>% group_by(temp, day) %>%
summarise(across(-c('reactor'), .fns = list(Mean = mean, SD = sd), na.rm = TRUE))
dat_grouped_log <- dat_grouped %>% filter(day > 0) %>% select(-ends_with('SD'), -starts_with('pH'), -starts_with('urea')) %>%
ungroup() %>% mutate(across(-c('day', 'temp'), function(x) log(x[day == 2]/x)))
dat_grouped_log_fit <- dat_grouped_log %>% group_by(temp) %>% mutate(across(-c('day'), function(x) lm(x ~ 0 + day)$coefficients)) %>% distinct(temp, .keep_all = T) %>% ungroup() %>% select(-c('vfa_Mean'))
write.csv(dat_grouped_log_fit, '../output/comps_rate_constants.csv', row.names = F)
R <- 0.008314 # KJ /(mol * K)
Arr_dat <- dat_grouped_log_fit %>% mutate(T_inv = 1/(temp + 273.15)) %>%
mutate(across(-c('temp','T_inv','day'), log))
View(Arr_dat)
keep <- apply(Arr_dat, 2, function(x) isTRUE(all(x)))
Ea<- as.data.frame(Arr_dat[, keep] %>% mutate(across(-c('temp','T_inv'), function(x) lm(x ~ T_inv)$coefficients[2]*R))) # KJ/mol
A <- as.data.frame(Arr_dat[, keep] %>% mutate(across(-c('temp','T_inv'), function(x) exp(lm(x ~ T_inv)$coefficients[1])))) # unit less?
View(Ea)
View(A)
7.455*10^9
7.455*10^9>1318960869
rm(list =ls())
library("readxl")
library("ggplot2")
library("gridExtra")
library("dplyr")
library("tidyr")
library('ggpmisc')
dat <- read_excel("../data/dat_comp.xlsx", sheet = "analysis", skip = 1, col_names = T)
fresh <- dat[1:6,]
fresh$source <- c('urine', 'urine', 'urine', 'feces', 'feces', 'feces')
names <- c('vfa','tn','tan','dm','vs','hem','cel','ndf','indf','lig','lip', 'c_dry','o_dry','n_dry','h_dry','s_dry','source')
fresh <- fresh[,  colnames(fresh) %in% names]
fresh.mod <- fresh %>% group_by(source) %>% summarise(across(, .fns = list(Mean = mean, SD = sd), na.rm = TRUE))
write.csv(fresh.mod, '../output/fresh_conc_table.csv', row.names = F)
# removed rows with time-zero samples
rem_rows <- which(dat$id <= 9)
dat <- dat[-c(rem_rows), ]
for(i in (1:16)){
dat$vs[dat$reactor == i] <- approx(x = dat$day[!is.na(dat$vs) & dat$reactor == i & dat$day < 86], y = dat$vs[!is.na(dat$vs) & dat$reactor == i & dat$day < 86], xout = dat$day[dat$reactor == i])$y
}
dat$vs[dat$day %in% c(29, 36, 50, 57, 71, 78)] <- NA
dat$dm_calc <- dat$dm[dat$day == 2] * dat$vs/100 + dat$ash[dat$day == 2]/100 * dat$dm[dat$day == 2]
# use calculated dm
dat$dm_used <- dat$dm_calc
# organic matter components
comps_dm <- c('lip', 'cel', 'hem', 'lig', 'ndf', 'indf', 'pro.n_dry', 'n_dry', 'c_dry', 'vs')
comps_slurry <- c('vfa', 'pro', 'tan')
pH <- 'pH'
dat_mass <- dat %>% mutate(pro.n_dry = n_dry * 6.25, across(comps_dm, function(x) x/100 * dm_used/100)) %>%
mutate(across(comps_slurry, function(x) x * (slurry_before_sample + sample_removed)/(slurry_before_sample[day == 0])/1000))
dat_mass$RFd <- dat_mass$ndf - dat_mass$indf
comps_dm <- c(comps_dm, 'RFd')
dat_grouped <- dat_mass %>% filter(reactor != 1) %>% select(c(comps_dm, comps_slurry, dm_used, dm_calc, day, reactor, temp, pH)) %>% mutate(RFd = ndf - lig) %>% group_by(temp, day) %>%
summarise(across(-c('reactor'), .fns = list(Mean = mean, SD = sd), na.rm = TRUE))
dat_grouped_log <- dat_grouped %>% filter(day > 0) %>% select(-ends_with('SD'), -starts_with('pH'), -starts_with('urea')) %>%
ungroup() %>% mutate(across(-c('day', 'temp'), function(x) log(x[day == 2]/x)))
dat_grouped_log_fit <- dat_grouped_log %>% group_by(temp) %>% mutate(across(-c('day'), function(x) lm(x ~ 0 + day)$coefficients)) %>% distinct(temp, .keep_all = T) %>% ungroup() %>% select(-c('vfa_Mean'))
write.csv(dat_grouped_log_fit, '../output/comps_rate_constants.csv', row.names = F)
R <- 0.008314 # KJ /(mol * K)
Arr_dat <- dat_grouped_log_fit %>% mutate(T_inv = 1/(temp + 273.15)) %>%
mutate(across(-c('temp','T_inv','day'), log))
keep <- apply(Arr_dat, 2, function(x) isTRUE(all(x)))
Ea<- as.data.frame(Arr_dat[, keep] %>% mutate(across(-c('temp','T_inv'), function(x) lm(x ~ T_inv)$coefficients[2]*R))) # KJ/mol
A <- as.data.frame(Arr_dat[, keep] %>% mutate(across(-c('temp','T_inv'), function(x) exp(lm(x ~ T_inv)$coefficients[1])))) # unit less?
write.csv(data.frame(rbind(Ea, A)), '../output/Arrh_constants.csv', row.names = F)
dat.mass <- dat %>% mutate(corr_mass = slurry_before_sample + sample_removed) %>% select(day, corr_mass, temp, dm) %>% group_by(temp, day) %>% summarise(mass.mean = mean(corr_mass, na.rm = T), dm = mean(dm, na.rm = T))
dat.mass$mass.mean[dat.mass$day >= 20] <- dat.mass$mass.mean[dat.mass$day >= 20] - 100
dat.mass$mass.mean[is.na(dat.mass$dm)] <- NA
dat.mass$temp <- as.factor(dat.mass$temp)
write.csv(dat.mass, '../output/mass_dat.csv', row.names = F)
